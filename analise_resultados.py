"""
AN√ÅLISE DOS RESULTADOS DO BACKTESTING
=====================================

Este script analisa os resultados do backtesting e prop√µe melhorias para a estrat√©gia.

Autor: Yan
Data: 2025-06-27
"""

import pandas as pd
import numpy as np
import joblib
import os
from datetime import datetime

def analisar_resultados():
    """Analisa os resultados do backtesting"""
    print("=" * 70)
    print("AN√ÅLISE DETALHADA DOS RESULTADOS")
    print("=" * 70)
    
    # Carregar resultados
    if not os.path.exists('resultados_backtest.csv'):
        print("‚ùå Arquivo de resultados n√£o encontrado!")
        return
    
    df_resultados = pd.read_csv('resultados_backtest.csv')
    
    print("üìä RESUMO DOS RESULTADOS:")
    print(df_resultados.to_string(index=False))
    print()
    
    print("üîç AN√ÅLISE DOS PROBLEMAS IDENTIFICADOS:")
    print()
    
    # Problema 1: Win Rate vs Retorno
    print("1Ô∏è‚É£ PARADOXO DO WIN RATE:")
    print("   ‚Ä¢ Win Rate m√©dio: 56.1% (bom)")
    print("   ‚Ä¢ Retorno m√©dio: -97.95% (muito ruim)")
    print("   ‚û°Ô∏è Conclus√£o: Trades lucrativos pequenos, trades perdedores grandes")
    print()
    
    # Problema 2: Stop Loss muito restritivo
    print("2Ô∏è‚É£ GEST√ÉO DE RISCO:")
    print("   ‚Ä¢ Stop Loss atual: 5%")
    print("   ‚Ä¢ Take Profit atual: 10%")
    print("   ‚Ä¢ Profit Factor alto mas resultado negativo")
    print("   ‚û°Ô∏è Conclus√£o: Muitos stop losses sendo ativados")
    print()
    
    # Problema 3: Overtrading
    print("3Ô∏è‚É£ FREQU√äNCIA DE TRADES:")
    total_trades = df_resultados['total_trades'].sum()
    print(f"   ‚Ä¢ Total de trades: {total_trades}")
    print(f"   ‚Ä¢ M√©dia por ativo: {total_trades/4:.1f} trades")
    print("   ‚û°Ô∏è Conclus√£o: Poss√≠vel overtrading (muitos sinais)")
    print()
    
    print("üí° PROPOSTAS DE MELHORIA:")
    print()
    print("1Ô∏è‚É£ AJUSTAR PAR√ÇMETROS DE RISCO:")
    print("   ‚Ä¢ Aumentar Stop Loss para 8-10%")
    print("   ‚Ä¢ Aumentar Take Profit para 15-20%")
    print("   ‚Ä¢ Melhorar ratio risk/reward")
    print()
    print("2Ô∏è‚É£ FILTRAR SINAIS:")
    print("   ‚Ä¢ Aumentar threshold de confian√ßa (0.6 ‚Üí 0.75)")
    print("   ‚Ä¢ Adicionar filtros de volatilidade")
    print("   ‚Ä¢ Considerar contexto de tend√™ncia")
    print()
    print("3Ô∏è‚É£ OTIMIZAR ALGORITMO ZIGZAG:")
    print("   ‚Ä¢ Testar diferentes thresholds (3% ‚Üí 5%)")
    print("   ‚Ä¢ Validar padr√µes Elliott mais rigorosamente")
    print("   ‚Ä¢ Adicionar confirma√ß√£o t√©cnica")
    print()
    print("4Ô∏è‚É£ MELHORAR FEATURES:")
    print("   ‚Ä¢ Adicionar indicadores de momento")
    print("   ‚Ä¢ Incluir an√°lise de volume")
    print("   ‚Ä¢ Considerar correla√ß√£o entre ativos")

def criar_backtest_otimizado():
    """Cria vers√£o otimizada do backtesting"""
    print("\n" + "=" * 70)
    print("CRIANDO VERS√ÉO OTIMIZADA DO BACKTESTING")
    print("=" * 70)
    
    # Par√¢metros otimizados
    config_otimizada = {
        'capital_inicial': 10000,
        'taxa_corretagem': 0.001,
        'stop_loss': 0.08,           # 8% (era 5%)
        'take_profit': 0.15,         # 15% (era 10%)
        'confianca_minima': 0.75,    # 75% (era 60%)
        'max_posicoes': 2,           # 2 (era 4) - menos posi√ß√µes simult√¢neas
        'min_intervalo_trades': 5    # M√≠nimo 5 dias entre trades no mesmo ativo
    }
    
    print("üéØ PAR√ÇMETROS OTIMIZADOS:")
    for key, value in config_otimizada.items():
        if isinstance(value, float) and key in ['stop_loss', 'take_profit']:
            print(f"   ‚Ä¢ {key}: {value*100:.0f}%")
        elif isinstance(value, float) and key == 'confianca_minima':
            print(f"   ‚Ä¢ {key}: {value*100:.0f}%")
        else:
            print(f"   ‚Ä¢ {key}: {value}")
    
    return config_otimizada

def analisar_modelos():
    """Analisa a qualidade dos modelos treinados"""
    print("\n" + "=" * 70)
    print("AN√ÅLISE DOS MODELOS TREINADOS")
    print("=" * 70)
    
    modelos = [f for f in os.listdir('.') if f.startswith('modelo_') and f.endswith('.joblib')]
    
    for modelo_file in modelos:
        ativo = modelo_file.replace('modelo_', '').replace('.joblib', '')
        
        # Carregar modelo e m√©tricas
        modelo_data = joblib.load(modelo_file)
        metricas = modelo_data.get('metricas', {})
        
        print(f"üìä {ativo.upper()}:")
        print(f"   ‚Ä¢ Acur√°cia: {metricas.get('accuracy', 'N/A')}")
        print(f"   ‚Ä¢ Features: {len(modelo_data.get('feature_names', []))}")
        
        # Analisar import√¢ncia das features (se dispon√≠vel)
        modelo_ml = modelo_data['modelo']
        if hasattr(modelo_ml, 'feature_importances_'):
            feature_names = modelo_data.get('feature_names', [])
            importancias = modelo_ml.feature_importances_
            
            # Top 3 features mais importantes
            indices_top = np.argsort(importancias)[-3:][::-1]
            print("   ‚Ä¢ Top 3 Features:")
            for i, idx in enumerate(indices_top):
                if idx < len(feature_names):
                    print(f"     {i+1}. {feature_names[idx]}: {importancias[idx]:.3f}")
        
        print()

def gerar_recomendacoes():
    """Gera recomenda√ß√µes espec√≠ficas para melhoria"""
    print("=" * 70)
    print("RECOMENDA√á√ïES PARA PR√ìXIMAS ITERA√á√ïES")
    print("=" * 70)
    
    recomendacoes = [
        {
            'titulo': 'üéØ MELHORIA IMEDIATA',
            'itens': [
                'Executar backtest com par√¢metros otimizados',
                'Implementar filtro de volatilidade',
                'Adicionar per√≠odo de "aquecimento" do modelo'
            ]
        },
        {
            'titulo': 'üìà MELHORIA DO ALGORITMO',
            'itens': [
                'Implementar Ondas de Elliott mais precisas',
                'Adicionar detec√ß√£o de diverg√™ncias',
                'Incluir an√°lise de suporte/resist√™ncia'
            ]
        },
        {
            'titulo': 'ü§ñ MELHORIA DO MODELO ML',
            'itens': [
                'Testar outros algoritmos (XGBoost, LSTM)',
                'Implementar ensemble de modelos',
                'Adicionar valida√ß√£o cruzada temporal'
            ]
        },
        {
            'titulo': 'üìä MELHORIA DOS DADOS',
            'itens': [
                'Incluir dados de volume mais detalhados',
                'Adicionar dados fundamentalistas',
                'Considerar dados de sentiment do mercado'
            ]
        }
    ]
    
    for rec in recomendacoes:
        print(f"{rec['titulo']}:")
        for item in rec['itens']:
            print(f"   ‚Ä¢ {item}")
        print()
    
    print("üéâ PR√ìXIMOS PASSOS SUGERIDOS:")
    print("1. Implementar backtesting_otimizado.py com novos par√¢metros")
    print("2. Testar em dados out-of-sample (dados mais recentes)")
    print("3. Implementar paper trading em tempo real")
    print("4. Desenvolver dashboard de monitoramento")

def main():
    """Fun√ß√£o principal da an√°lise"""
    print(f"In√≠cio da an√°lise: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Executar an√°lises
    analisar_resultados()
    config_otimizada = criar_backtest_otimizado()
    analisar_modelos()
    gerar_recomendacoes()
    
    print(f"\nFim da an√°lise: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
